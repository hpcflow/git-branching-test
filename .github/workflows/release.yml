# name: Release
# on:
#   workflow_dispatch:
#   push:
#     branches: [main]

# jobs:
#   publish:
#     if: | # only release from develop (as pre-release) or main
#       github.ref == 'refs/heads/develop' ||
#       github.ref == 'refs/heads/main'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0 # get all history and tags

#       - uses: actions/setup-python@v2
#         with:
#           python-version: 3.9

#       - name: Install poetry
#         run: |
#           python -m pip install poetry==1.1.11

#       - name: Configure poetry
#         run: |
#           poetry config virtualenvs.in-project true

#       - name: Cache the virtualenv
#         uses: actions/cache@v2
#         with:
#           path: ./.venv
#           key: venv-${{ hashFiles('**/poetry.lock') }}

#       - name: Install dependencies
#         run: |
#           poetry install

#       - name: Run tests
#         run: |
#           poetry run python -m pytest --verbose --exitfirst

#       - name: Configure git
#         run: |
#           git config user.name github-actions
#           git config user.email github-actions@github.com
#           git fetch
#           git pull
#           git status
#           git tag --list

#       - name: Bump version and generate changelog (pre-release)
#         if: ${{ github.ref == 'refs/heads/develop' }}
#         run: |
#           poetry run cz bump --changelog-to-stdout --yes --changelog --prerelease alpha > change_log_inc.md

#       - name: Bump version and generate changelog (not pre-release)
#         if: ${{ github.ref == 'refs/heads/main' }}
#         run: |
#           poetry run cz bump --changelog-to-stdout --yes --changelog > change_log_inc.md

#       - name: Show git status
#         run: |
#           var=`git status -sb`
#           echo $var

#       - name: Check whether to publish
#         run: |
#           if [[ `git status -sb`  == *'ahead'* ]]; then
#             echo "publish=true" >> $GITHUB_ENV
#             echo "publish set to true"
#           fi
#           export REV=`poetry run cz version --project`
#           echo "REVISION=$REV" >> $GITHUB_ENV

#       - name: Push (with tags)
#         if: env.publish
#         run: |
#           git pull
#           git push --follow-tags --tags

#       - name: Build (for PyPI)
#         if: env.publish
#         run: |
#           poetry build

#       - name: Publish (to test PyPI)
#         if: env.publish
#         run: |
#           poetry config repositories.test-pypi https://test.pypi.org/legacy/
#           poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI }}
#           poetry publish --repository test-pypi

#       - name: Release
#         if: env.publish
#         uses: softprops/action-gh-release@v1
#         with:
#           body_path: "change_log_inc.md"
#           tag_name: ${{ env.REVISION }}
#           draft: false
#           prerelease: ${{ github.ref == 'refs/heads/develop' }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   build-executables:
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-2019, ubuntu-18.04, macos-10.15]
#         include:
#           - os: windows-2019
#             executable_ext: .exe
#           - os: ubuntu-18.04
#             executable_ext: ""
#           - os: macos-10.15
#             executable_ext: ""

#     runs-on: ${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v2

#       - uses: actions/setup-python@v2
#         with:
#           python-version: 3.9

#       - name: Install poetry
#         run: |
#           python -m pip install poetry==1.1.11

#       - name: Configure poetry
#         run: |
#           poetry config virtualenvs.in-project true

#       - name: Cache the virtualenv
#         uses: actions/cache@v2
#         with:
#           path: ./.venv
#           key: venv-${{ hashFiles('**/poetry.lock') }}

#       - name: Install dependencies
#         run: |
#           poetry install

#       - name: Build with pyinstaller for ${{matrix.os}}
#         run: |
#           poetry run pyinstaller git_branching_test/cli.py --name=git_branching_test --onefile

#       - name: Rename executable for ${{matrix.os}}
#         run: |
#           mv dist/git_branching_test${{ matrix.executable_ext }} dist/git_branching_test-${{ matrix.os }}${{ matrix.executable_ext }}

#       - uses: actions/upload-artifact@v2
#         with:
#           name: git_branching_test-${{ matrix.os }}${{ matrix.executable_ext }}
#           path: dist/git_branching_test-${{ matrix.os }}${{ matrix.executable_ext }}
