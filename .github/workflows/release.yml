name: Release
on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  publish:
    if: | # only release from develop (as pre-release) or main
      github.ref == 'refs/heads/develop' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      do_publish: ${{ steps.check_publish.outputs.do_publish }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # get all history and tags

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install poetry
        run: |
          python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install

      - name: Run tests
        run: |
          poetry run python -m pytest --verbose --exitfirst

      - name: Configure git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          git status
          git tag --list

      - name: Bump version and generate changelog (pre-release)
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          poetry run cz bump --yes --changelog --prerelease alpha

      - name: Bump version and generate changelog (not pre-release)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          poetry run cz bump --yes --changelog

      - name: Check whether to publish
        id: check_publish
        run: |
          [[ `git status`  == *'nothing to commit'* ]] && do_publish_string="true" || do_publish_string="false"
          echo $do_publish_string
          echo "::set-output name=do_publish::$do_publish_string"

      - name: test
        run: echo ${{ needs.publish.outputs.do_publish }}

      - name: Push (with tags)
        if: ${{ needs.publish.outputs.do_publish == "true" }}
        run: |
          git push
          git push --tags

      - name: Build (for PyPI)
        if: ${{ needs.publish.outputs.do_publish == "true" }}
        run: |
          poetry build

      - name: Publish (to test PyPI)
        if: ${{ needs.publish.outputs.do_publish == "true" }}
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI }}
          poetry publish --repository test-pypi

  build-executables:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-10.15]
        include:
          - os: windows-2019
            executable_ext: .exe
          - os: ubuntu-18.04
            executable_ext: ""
          - os: macos-10.15
            executable_ext: ""

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install poetry
        run: |
          python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install

      - name: Build with pyinstaller for ${{matrix.os}}
        run: |
          poetry run pyinstaller git_branching_test/cli.py --name=git_branching_test --onefile

      - name: Rename executable for ${{matrix.os}}
        run: |
          mv dist/git_branching_test${{ matrix.executable_ext }} dist/git_branching_test-${{ matrix.os }}${{ matrix.executable_ext }}

      - uses: actions/upload-artifact@v2
        with:
          name: git_branching_test-${{ matrix.os }}${{ matrix.executable_ext }}
          path: dist/git_branching_test-${{ matrix.os }}${{ matrix.executable_ext }}
